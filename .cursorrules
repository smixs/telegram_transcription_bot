# CursorRules

1. ALWAYS update the `Changelog.md` under `[Unreleased]` when making changes and update the version number in `ProjectSettings.asset` (`bundleVersion`) when releasing a new version.
2. When asked to commit staged changes, always check the changelog to ensure changes in staged files are represented in the changelog before committing.
3. When releasing:
   - Review `[Unreleased]` changes to determine the version bump (features → minor, fixes → patch, breaking → major).
   - Move changes to a new version section with the release date.
   - Update the `bundleVersion` in `ProjectSettings.asset`.
   - Commit as `release: Version X.Y.Z`.
   - Create a git tag for the release.

---





# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

---

## Version Numbering

This project uses a three-number versioning system (X.Y.Z):
- **X (Major):** Breaking changes, major feature overhauls
- **Y (Minor):** New features, significant improvements
- **Z (Patch):** Bug fixes, minor improvements

**Example:** Version `1.2.3`
- `1`: Major version
- `2`: Minor version
- `3`: Patch version

**When to increment:**
- **Major (X):** Incompatible changes that might break existing functionality.
- **Minor (Y):** New functionality added in a backward-compatible manner.
- **Patch (Z):** Backward-compatible bug fixes.

---

## Making Changelog Entries

### For New Changes in Development:
1. Add changes under the `[Unreleased]` section.
2. Categorize them under appropriate headers:
   - `Added`: New features
   - `Changed`: Changes to existing functionality
   - `Deprecated`: Soon-to-be removed features
   - `Removed`: Removed features
   - `Fixed`: Bug fixes
   - `Security`: Vulnerability fixes
   - `Technical`: Technical changes/dependencies
3. Keep entries concise but descriptive.

### When Releasing a Version:
1. Convert the `[Unreleased]` section to a version number with the release date (e.g., `[1.0.0] - 2024-01-20`).
2. Create a new empty `[Unreleased]` section at the top.

---

## General Rules

- Newest changes always go at the top of the file.
- Each version should be in descending order (newest to oldest).
- Group related changes under the same category.
- Use bullet points for each entry.

---

## Development Workflow

1. **For Every Code Change:**
   - ALWAYS add an entry to the `[Unreleased]` section in the changelog.
   - Write clear, descriptive change notes.
   - Categorize changes appropriately using the headers above.
   - Commit changes with meaningful commit messages.
2. **For Version Releases:**
   - Move `[Unreleased]` changes to a new version section with today's date.
   - Update the version number in `ProjectSettings.asset` (`bundleVersion`).
   - Create a git tag for the version.
   - Create a new empty `[Unreleased]` section at the top.

---

## Release Process

When asked to make a release, follow these steps:

1. **Review Changes:**
   - Review all changes under `[Unreleased]`.
   - Ensure all changes are properly categorized.
   - Verify all changes are documented.
2. **Choose Version Number:**
   - For new features: increment minor version (e.g., `0.1.0 → 0.2.0`).
   - For bug fixes: increment patch version (e.g., `0.1.0 → 0.1.1`).
   - For breaking changes: increment major version (e.g., `0.1.0 → 1.0.0`).
3. **Update Files:**
   - Move `[Unreleased]` changes to a new version section with today's date.
   - Update the version in `ProjectSettings.asset` (`bundleVersion`).
   - Create a new empty `[Unreleased]` section.
4. **Commit and Tag:**
   - Commit all changes with the message `release: Version X.Y.Z`.
   - Create a git tag for the version (e.g., `v0.2.0`).

---

## [Unreleased]

### Added
- Поддержка разбиения длинных сообщений на части для всех типов файлов
- Расширенные возможности Deepgram API:
  - Автоматическая конвертация чисел в цифровой формат


### Changed
- Заменены текстовые сообщения о процессе на системные индикаторы в Telegram
- Отключена фильтрация нецензурной лексики для точной транскрипции
- Унифицирована обработка длинных сообщений для аудио, видео и голосовых сообщений
- Оптимизирована работа с SSL-сертификатами через certifi

### Fixed
- Исправлена проблема с длинными сообщениями, превышающими лимит Telegram
- Исправлена обработка SSL-сертификатов при запросах к API
- Улучшена обработка ошибок во всех обработчиках

### Technical
- Добавлена зависимость certifi для корректной работы с SSL
- Обновлены параметры запросов к Deepgram API
- Унифицирован код обработчиков для разных типов медиафайлов

## [0.1.3] - 2024-01-01

### Added
- Улучшенные промпты для более точной обработки текста
- Toast notifications для индикации процесса обработки

### Changed
- Оптимизирована обработка голосовых сообщений
- Улучшена читаемость и структура промптов
- Обновлены инструкции для языковых моделей

### Fixed
- Исправлено отображение статуса обработки сообщений
- Улучшена обработка ошибок в сервисах

### Technical
- Обновлены зависимости проекта
- Оптимизирована структура Docker-контейнера
- Добавлены правила игнорирования файлов

## [0.1.2] - 2024-01-01

### Changed
- Removed all message prefixes for cleaner output
- Simplified message formatting in transcription results
- Improved error handling and logging in style processing
- Optimized code following KISS and DRY principles

### Fixed
- Fixed Anthropic API integration
- Fixed message formatting to show clean text without prefixes
- Fixed error messages to be more concise

## [0.1.1] - 2024-01-01

### Added
- Anthropic API integration for text processing
- Three text processing styles: Proofread, My Style, and Business
- Style selection buttons under each transcription
- Prompt templates for different text processing styles

### Changed
- Updated Deepgram service to use the latest API structure
- Simplified language handling in transcription results
- Optimized code following KISS and DRY principles

## [0.1.0] - 2024-01-01

### Added
- Initial release
- Basic voice message transcription
- Video message transcription
- Audio file transcription
- Deepgram API integration
- Basic error handling
- Logging system
